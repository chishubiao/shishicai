/*!
 * ASP.NET SignalR JavaScript Library v1.2.2
 * http://signalr.net/
 *
 * Copyright Microsoft Open Technologies, Inc. All rights reserved.
 * Licensed under the Apache 2.0
 * https://github.com/SignalR/SignalR/blob/master/LICENSE.md
 *
 */

/// <reference path="..\..\SignalR.Client.JS\Scripts\jquery-1.6.4.js" />
/// <reference path="jquery.signalR.js" />
(function ($, window, undefined) {
    /// <param name="$" type="jQuery" />
    "use strict";

    if (typeof ($.signalR) !== "function") {
        throw new Error("SignalR: SignalR is not loaded. Please ensure jquery.signalR-x.js is referenced before ~/signalr/hubs.");
    }

    var signalR = $.signalR;

    function makeProxyCallback(hub, callback) {
        return function () {
            // Call the client hub method
            callback.apply(hub, $.makeArray(arguments));
        };
    }

    function registerHubProxies(instance, shouldSubscribe) {
        var key, hub, memberKey, memberValue, subscriptionMethod;

        for (key in instance) {
            if (instance.hasOwnProperty(key)) {
                hub = instance[key];

                if (!(hub.hubName)) {
                    // Not a client hub
                    continue;
                }

                if (shouldSubscribe) {
                    // We want to subscribe to the hub events
                    subscriptionMethod = hub.on;
                }
                else {
                    // We want to unsubscribe from the hub events
                    subscriptionMethod = hub.off;
                }

                // Loop through all members on the hub and find client hub functions to subscribe/unsubscribe
                for (memberKey in hub.client) {
                    if (hub.client.hasOwnProperty(memberKey)) {
                        memberValue = hub.client[memberKey];

                        if (!$.isFunction(memberValue)) {
                            // Not a client hub function
                            continue;
                        }

                        subscriptionMethod.call(hub, memberKey, makeProxyCallback(hub, memberValue));
                    }
                }
            }
        }
    }

    $.hubConnection.prototype.createHubProxies = function () {
        var proxies = {};
        this.starting(function () {
            // Register the hub proxies as subscribed
            // (instance, shouldSubscribe)
            registerHubProxies(proxies, true);

            this._registerSubscribedHubs();
        }).disconnected(function () {
            // Unsubscribe all hub proxies when we "disconnect".  This is to ensure that we do not re-add functional call backs.
            // (instance, shouldSubscribe)
            registerHubProxies(proxies, false);
        });

        proxies.clientHub = this.createHubProxy('clientHub'); 
        proxies.clientHub.client = { };
        proxies.clientHub.server = {
            batchreturncode: function (chipinIdList) {
                return proxies.clientHub.invoke.apply(proxies.clientHub, $.merge(["batchreturncode"], $.makeArray(arguments)));
             },

            changepassword: function (newPwd, oldPwd) {
                return proxies.clientHub.invoke.apply(proxies.clientHub, $.merge(["changepassword"], $.makeArray(arguments)));
             },

            checkballcontentisstop: function (jsSpeedPlayChipIn) {
                return proxies.clientHub.invoke.apply(proxies.clientHub, $.merge(["checkballcontentisstop"], $.makeArray(arguments)));
             },

            deletechipinprint: function (userid) {
                return proxies.clientHub.invoke.apply(proxies.clientHub, $.merge(["deletechipinprint"], $.makeArray(arguments)));
             },

            delnowstopball: function (LstId) {
                return proxies.clientHub.invoke.apply(proxies.clientHub, $.merge(["delnowstopball"], $.makeArray(arguments)));
             },

            getballdetaillist: function (kingnameEnum, ballId) {
                return proxies.clientHub.invoke.apply(proxies.clientHub, $.merge(["getballdetaillist"], $.makeArray(arguments)));
             },

            getchipincheckparam: function () {
                return proxies.clientHub.invoke.apply(proxies.clientHub, $.merge(["getchipincheckparam"], $.makeArray(arguments)));
             },

            getcuropening: function () {
                return proxies.clientHub.invoke.apply(proxies.clientHub, $.merge(["getcuropening"], $.makeArray(arguments)));
             },

            getrateandcandownmoney: function (ballContent, ballId) {
                return proxies.clientHub.invoke.apply(proxies.clientHub, $.merge(["getrateandcandownmoney"], $.makeArray(arguments)));
             },

            memberchipin: function (json) {
                return proxies.clientHub.invoke.apply(proxies.clientHub, $.merge(["memberchipin"], $.makeArray(arguments)));
             },

            savememberdata: function (json) {
                return proxies.clientHub.invoke.apply(proxies.clientHub, $.merge(["savememberdata"], $.makeArray(arguments)));
             },

            speedplaychipin: function (jsSpeedPlayChipIn) {
                return proxies.clientHub.invoke.apply(proxies.clientHub, $.merge(["speedplaychipin"], $.makeArray(arguments)));
             },

            speedselectchipin: function (ballContentList, downMoney, kindName, selectlogs) {
                return proxies.clientHub.invoke.apply(proxies.clientHub, $.merge(["speedselectchipin"], $.makeArray(arguments)));
             },

            speedselectchipinToOthers: function (orderNumber, ballContentList, downMoney, kindName, selectlogs) {
                return proxies.clientHub.invoke.apply(proxies.clientHub, $.merge(["speedselectchipinToOthers"], $.makeArray(arguments)));
             },

            txtImportChipIn: function (ballList) {
                return proxies.clientHub.invoke.apply(proxies.clientHub, $.merge(["txtImportChipIn"], $.makeArray(arguments)));
             }
        };

        proxies.manageHub = this.createHubProxy('manageHub'); 
        proxies.manageHub.client = { };
        proxies.manageHub.server = {
            addAccount: function (json) {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["AddAccount"], $.makeArray(arguments)));
             },

            addBatchRateInfoList: function (json, strMgrPwd) {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["addBatchRateInfoList"], $.makeArray(arguments)));
             },

            addchildaccount: function (json) {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["addchildaccount"], $.makeArray(arguments)));
             },

            addChuhuo: function (ballContent, rate, downMoney, isSizixian) {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["addChuhuo"], $.makeArray(arguments)));
             },

            addissuenumber: function (majordomoUserId, issueNumber, pwd) {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["addissuenumber"], $.makeArray(arguments)));
             },

            addKindChipLimit: function (lstBall, ballKindChipLimit, mgrPwd, locationName) {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["addKindChipLimit"], $.makeArray(arguments)));
             },

            addPartition: function (tid) {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["AddPartition"], $.makeArray(arguments)));
             },

            addPLBD: function (rate, isRateDvalue, dxsx, isDxsxDvalue, ballList, isShow, isLowerLevelOccupy) {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["AddPLBD"], $.makeArray(arguments)));
             },

            addRateChange: function (json, strMgrPwd) {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["addRateChange"], $.makeArray(arguments)));
             },

            addRateInfo: function (gameId, companyId, kindName, frank_start, frank_end, frank_jj) {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["addRateInfo"], $.makeArray(arguments)));
             },

            batchAddRateChange: function (isNotDingPan, newRate, dxsx, strMgrPwd, lstBall, kingName) {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["batchAddRateChange"], $.makeArray(arguments)));
             },

            changeaccountpwd: function (userid, oldpwd, newpwd) {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["changeaccountpwd"], $.makeArray(arguments)));
             },

            changeRate: function (lstBall, floatRate, locationName) {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["changeRate"], $.makeArray(arguments)));
             },

            checkManagerPassword: function (pwd) {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["checkManagerPassword"], $.makeArray(arguments)));
             },

            chuhuo: function (ballContentList, rate, downMoney) {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["chuhuo"], $.makeArray(arguments)));
             },

            chuhuoreturncode: function (chipinIdList) {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["chuhuoreturncode"], $.makeArray(arguments)));
             },

            delBatchRateInfoByIds: function (ids, mgrPwd) {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["delBatchRateInfoByIds"], $.makeArray(arguments)));
             },

            delChangeRateByIds: function (idList, mgrPwd) {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["delChangeRateByIds"], $.makeArray(arguments)));
             },

            deleteAccount: function (uids) {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["DeleteAccount"], $.makeArray(arguments)));
             },

            deletechildaccount: function (uids) {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["deletechildaccount"], $.makeArray(arguments)));
             },

            deletePdfFile: function (ids) {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["DeletePdfFile"], $.makeArray(arguments)));
             },

            delissuenumber: function (id) {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["delissuenumber"], $.makeArray(arguments)));
             },

            delLoginBgByIds: function (idList) {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["delLoginBgByIds"], $.makeArray(arguments)));
             },

            delPartition: function (tid) {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["DelPartition"], $.makeArray(arguments)));
             },

            delRateInfoByIds: function (ids) {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["delRateInfoByIds"], $.makeArray(arguments)));
             },

            editAccount: function (json, level, mangerPwd, isSelfHandle, upOccupy, nextOccupy, contributionOccupyLimit) {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["EditAccount"], $.makeArray(arguments)));
             },

            editAccountDetails: function (json, logJson, mangerPwd) {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["EditAccountDetails"], $.makeArray(arguments)));
             },

            editchangecolor: function (moneyLess, moneyMore, ballId) {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["editchangecolor"], $.makeArray(arguments)));
             },

            editChangeRatePackage: function (floatRate, dxsx, packageId, kindName) {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["EditChangeRatePackage"], $.makeArray(arguments)));
             },

            editchildaccount: function (json) {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["editchildaccount"], $.makeArray(arguments)));
             },

            editMaxCredit: function (maxCredit) {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["editMaxCredit"], $.makeArray(arguments)));
             },

            exportDb: function () {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["ExportDb"], $.makeArray(arguments)));
             },

            exportPdf: function (issueNo, issueNumber) {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["exportPdf"], $.makeArray(arguments)));
             },

            getbaseconfig: function (MajordomoUserId) {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["getbaseconfig"], $.makeArray(arguments)));
             },

            getcuropening: function (MajordomoUserId) {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["getcuropening"], $.makeArray(arguments)));
             },

            getDingPanRate: function (ballContent, kingName) {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["getDingPanRate"], $.makeArray(arguments)));
             },

            getDingPanRateList: function () {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["getDingPanRateList"], $.makeArray(arguments)));
             },

            getloadmaindata: function () {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["getloadmaindata"], $.makeArray(arguments)));
             },

            getRelationBallContent: function (ballId, ballContent, moFirmOfferTypeMode) {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["getRelationBallContent"], $.makeArray(arguments)));
             },

            getResidueCredit: function (userId) {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["GetResidueCredit"], $.makeArray(arguments)));
             },

            initOpeningConfig: function (tid, gameId) {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["InitOpeningConfig"], $.makeArray(arguments)));
             },

            levelCreditGuiling: function (uid) {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["LevelCreditGuiling"], $.makeArray(arguments)));
             },

            levelDeletePdfFile: function () {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["LevelDeletePdfFile"], $.makeArray(arguments)));
             },

            occupyMoneyLimit: function (contributionRealOccupy, json) {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["OccupyMoneyLimit"], $.makeArray(arguments)));
             },

            openingopera: function (json, pwd) {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["openingopera"], $.makeArray(arguments)));
             },

            payout: function (tid, gameId, num1, num2, num3, num4, num5, num6, num7) {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["Payout"], $.makeArray(arguments)));
             },

            resetDingPanRate: function (lstBall, locationName) {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["resetDingPanRate"], $.makeArray(arguments)));
             },

            savebaseconfig: function (json, noticeJson) {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["savebaseconfig"], $.makeArray(arguments)));
             },

            saveMajordomoUserName: function (userName) {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["saveMajordomoUserName"], $.makeArray(arguments)));
             },

            showDayReport: function (tid) {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["ShowDayReport"], $.makeArray(arguments)));
             },

            updateBatchRateInfoList: function (json, logJson, strMgrPwd) {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["updateBatchRateInfoList"], $.makeArray(arguments)));
             },

            updateChangeRateList: function (json, strMgrPwd) {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["updateChangeRateList"], $.makeArray(arguments)));
             },

            updateFpRateAB: function (fpRateAB, mrgPwd) {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["updateFpRateAB"], $.makeArray(arguments)));
             },

            updateRateInfoList: function (json) {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["updateRateInfoList"], $.makeArray(arguments)));
             },

            updateSystemCache: function () {
                return proxies.manageHub.invoke.apply(proxies.manageHub, $.merge(["UpdateSystemCache"], $.makeArray(arguments)));
             }
        };

        return proxies;
    };

    signalR.hub = $.hubConnection("/signalr", { useDefaultPath: false });
    $.extend(signalR, signalR.hub.createHubProxies());

}(window.jQuery, window));